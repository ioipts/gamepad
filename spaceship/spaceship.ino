/**
 * LOLIN(WEMOS) D1 R2 & Mini
 * Green SPI_MODE2
 * Blue SPI_MODE3
 */

//#define _PCF8574AP
//#define _MODE3
const char* id="MEKMOK_GAME"; 
const char* ver="20220101";

#include "user_interface.h"
#include <ESP8266WiFi.h>  
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <SoftwareSerial.h>
#include <WiFiClient.h>
#include <Wire.h>
#include "PCF8574.h"
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789

WiFiClient wifiClient;
ESP8266WebServer server(80); 
bool pcf8574;

#if defined(_PCF8574AP)
PCF8574 pcf(0x38);
#define PCFADDR 0x38
#else
PCF8574 pcf(0x20);
#define PCFADDR 0x20
#endif

Adafruit_ST7789 tft=Adafruit_ST7789(10,D8,D6);  //DC,RS
unsigned long myTime;

void handleRoot() {
  char msg[2048];  
  struct station_config conf;
  wifi_station_get_config(&conf);
  sprintf(msg,"<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><style> a:link, a:visited {color: white;padding: 5px 5px;text-align: center;text-decoration: none;display: inline-block;} a:hover, a:active { background-color: #0070a1; }</style></head><body style=\"background-color:#6491c2\">Hello2</body></html>");
  server.send(200, "text/html", msg);   
}

void setup() {
  pinMode(D0, OUTPUT);
  digitalWrite(D0, HIGH);         //enable display
  for (int i=0;i<=5;i++)
  {
   pcf.pinMode(i,INPUT);      
   pcf.pinMode(i, INPUT_PULLUP);
  }
  pcf.begin();
  
  Wire.begin( D2,D1);             //SDA, SCL
  Wire.setClock( 100000 );        //26/1/2020 tested with oled work for some sensor if remove
  Wire.beginTransmission(PCFADDR);
  delay(10);
  pcf8574=(!Wire.endTransmission());

  struct station_config conf;
  wifi_station_get_config(&conf);
  wifi_status_led_uninstall();
  WiFi.mode(WIFI_AP_STA);      
  WiFi.hostname(id);        
  WiFi.softAP(id, "");    
  server.on("/", handleRoot);    
  server.begin();     

  tft.init(240,240);
#if defined(_MODE3)
  tft.init(240, 240, SPI_MODE3); 
#else
  tft.init(240, 240, SPI_MODE2); 
#endif
  tft.fillScreen(ST77XX_WHITE);  
  tft.setRotation(2); 
  myTime=millis();
}

int16_t rainbowcolor(int angle) {
  byte red, green, blue;
  if (angle<60) {red = 255; green = round(angle*4.25-0.01); blue = 0;} else
  if (angle<120) {red = round((120-angle)*4.25-0.01); green = 255; blue = 0;} else 
  if (angle<180) {red = 0, green = 255; blue = round((angle-120)*4.25-0.01);} else 
  if (angle<240) {red = 0, green = round((240-angle)*4.25-0.01); blue = 255;} else 
  if (angle<300) {red = round((angle-240)*4.25-0.01), green = 0; blue = 255;} else 
                 {red = 255, green = 0; blue = round((360-angle)*4.25-0.01);} 
 //5,6,5
  return (int)((red*0x1F)/255)*0x7FF +
         (int)((green*0x3F)/255)*0x1F + 
         (int)((blue*0x1F)/255);
}
 
void drawRainbow() {
    for (int i=0;i<240;i++) {
      tft.drawFastHLine(0, i, 240, rainbowcolor(360*i/240));
    } 
}

//spaceship
int px=0;
int py=0;
int x=120;
int y=200;
int s=16; //radius

//bullet
int bx=-1;
int by=-10;
int pby=-10;

//astroid
int ax=120;
int ay=-10;
int pay=-1;

const uint16_t spaceship[]={
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xe5d7, 0xc2ec, 0xc2cc, 0xdd35, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xd3d0, 0xb000, 0xc800, 0xc800, 0xb000, 0xc2cc, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xe5b7, 0xa800, 0xe0a3, 0xf8e4, 0xf8a3, 0xf0a3, 0xb000, 0xd472, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xba6b, 0xe000, 0xf8e3, 0xf8c3, 0xf862, 0xf861, 0xf000, 0xb947, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf77e, 0xd0c4, 0xe042, 0x6270, 0x4c36, 0x5457, 0x52f2, 0xd0e5, 0xd021, 0xe67a, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xe555, 0xee9a, 0xf79e, 0xe841, 0x622e, 0x047d, 0x05bf, 0x0e1f, 0x049d, 0x42d2, 0xe000, 0xf679, 0xf77d, 0xdcf4, 0xffde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfffe, 0x220e, 0x961c, 0xfffe, 0xe062, 0x4a70, 0x041a, 0x251b, 0x257c, 0x041a, 0x3313, 0xc801, 0xfeba, 0xc7bf, 0x114c, 0xe6db, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0355, 0x8edf, 0xffbd, 0xe062, 0x4a70, 0x03fa, 0x251b, 0x257c, 0x0419, 0x2b13, 0xd001, 0xfe99, 0xc7ff, 0x02d4, 0xcefc, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1354, 0x9eff, 0xfffd, 0xa8c5, 0x0af4, 0x03d8, 0x251b, 0x257c, 0x0bd8, 0x0377, 0x8885, 0xfeb8, 0xd7ff, 0x02b3, 0xdf5e, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x12f3, 0x965c, 0xff3a, 0x2a0e, 0x0336, 0x0bb7, 0x251b, 0x257c, 0x13d8, 0x0397, 0x11cd, 0xf657, 0xcf9e, 0x0292, 0xdf3d, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf79d, 0x5aaa, 0x0271, 0x3aee, 0x3a6b, 0x02d3, 0x0b55, 0x0bb8, 0x251b, 0x257c, 0x13d8, 0x0b56, 0x02d3, 0x2a6d, 0x4acc, 0x02d3, 0x3a29, 0xe71b, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xad54, 0x0820, 0x1313, 0x12f2, 0x022f, 0x0291, 0x0b55, 0x0bb8, 0x251b, 0x257c, 0x0bd8, 0x0b56, 0x02b1, 0x0230, 0x12b0, 0x1355, 0x0042, 0x9430, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xad34, 0x2904, 0x1b33, 0x0335, 0x0291, 0x0291, 0x0b55, 0x13b8, 0x251b, 0x257c, 0x0bd8, 0x0b56, 0x02b1, 0x0291, 0x0315, 0x1355, 0x1925, 0x9450, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xadf7, 0x1124, 0x0395, 0x0398, 0x02d3, 0x02f3, 0x03f8, 0x0c19, 0x2d3b, 0x255c, 0x03f9, 0x03d8, 0x02f4, 0x02d3, 0x0357, 0x03b8, 0x0986, 0x9533, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xd3ee, 0x8020, 0x71ca, 0x61ab, 0x5968, 0x6147, 0x522e, 0x0bb8, 0x05ff, 0x063f, 0x03f9, 0x4a6f, 0x6147, 0x5968, 0x61aa, 0x69cb, 0x7841, 0xc2ea, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf79e, 0xad15, 0x70a6, 0x996a, 0x9127, 0x8926, 0x7905, 0x7905, 0xc083, 0xb127, 0x8acf, 0x8aef, 0xa168, 0xc083, 0x8105, 0x7905, 0x8926, 0x9126, 0x9989, 0x7886, 0x9c32, 0xf77d, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffdf, 0x5c56, 0x1169, 0x018b, 0x0377, 0x041a, 0x0376, 0x0355, 0x02d2, 0x0335, 0x798a, 0xe841, 0xf800, 0xf800, 0xe861, 0x9948, 0x02f4, 0x02d3, 0x0335, 0x0356, 0x03d8, 0x03b9, 0x01ad, 0x1168, 0x4393, 0xef9e, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0x43f5, 0x014e, 0x016a, 0x01cc, 0x0bd8, 0x0bd8, 0x0355, 0x0314, 0x0291, 0x02f4, 0x8169, 0xd8a3, 0xe0c4, 0xe8c4, 0xd0a4, 0x9927, 0x02d3, 0x02b2, 0x0314, 0x0335, 0x0b96, 0x0bf9, 0x020e, 0x0169, 0x016e, 0x1b33, 0xef9e, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffdf, 0x02b1, 0x0230, 0x0a4e, 0x026f, 0x0bb8, 0x0bd8, 0x0355, 0x02f3, 0x0270, 0x02d3, 0x9128, 0xf020, 0xe0c4, 0xe8e4, 0xf041, 0xb0e5, 0x02d2, 0x0271, 0x02d3, 0x0335, 0x0397, 0x0bd9, 0x0291, 0x024d, 0x0271, 0x0210, 0xd71d, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffdf, 0x0ab2, 0x0210, 0x01ed, 0x018d, 0x0376, 0x0bf9, 0x2acf, 0x5aeb, 0x52ec, 0x52ec, 0x3332, 0x5a4f, 0xe8c3, 0xf882, 0x720d, 0x2b33, 0x52ed, 0x52ec, 0x5aec, 0x3aad, 0x0bb7, 0x0bb8, 0x01ce, 0x01ac, 0x0250, 0x0230, 0xd71d, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0x3394, 0x018e, 0x126f, 0x74d5, 0x9d56, 0x42ab, 0x4a28, 0x7b6d, 0x7bae, 0x7b6c, 0x0438, 0x32f4, 0xf082, 0xf861, 0x5290, 0x0439, 0x6b6d, 0x838d, 0x7b8d, 0x5a69, 0x424a, 0x8cf5, 0x8537, 0x1ab0, 0x01cf, 0x12f2, 0xef7e, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xf7bf, 0xcebc, 0xef9e, 0xffff, 0x9c4f, 0x3923, 0x732c, 0x738e, 0x73ae, 0x63cf, 0x89ea, 0xd843, 0xe8a3, 0xe8e4, 0xd862, 0x9988, 0x63ae, 0x73ae, 0x738e, 0x734d, 0x41a5, 0x7b4b, 0xffff, 0xffff, 0xd6bc, 0xef9e, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x73af, 0x31a7, 0x634d, 0x634e, 0x634d, 0x536e, 0xa945, 0xd083, 0xe0e4, 0xe8c4, 0xc8a4, 0xb8e4, 0x632d, 0x636e, 0x634d, 0x6b6e, 0x4229, 0x5aec, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xd75e, 0x867d, 0x451a, 0x34b9, 0x0418, 0x04db, 0x0479, 0x02b2, 0x0334, 0x61ea, 0xc8c2, 0xf861, 0xf800, 0xd041, 0x7146, 0x0313, 0x02d3, 0x03f8, 0x04fc, 0x0c39, 0x34b9, 0x4d1a, 0x763d, 0xc73e, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xdf7e, 0x4dbc, 0x151b, 0x051c, 0x051e, 0x349a, 0x6ab0, 0x828f, 0x6a6f, 0x418a, 0x41cb, 0x88c3, 0xa8c3, 0x8b10, 0x8b31, 0xa105, 0x9861, 0x41aa, 0x418a, 0x622e, 0x828f, 0x728f, 0x4459, 0x051d, 0x051d, 0x0cfb, 0x3d9c, 0xc73e, 0xffff, 0xffff, 
0xffff, 0xffdf, 0x3417, 0x0378, 0x067f, 0x15de, 0x72f0, 0xc862, 0xd041, 0xe883, 0xd883, 0x98a2, 0xa861, 0x88a3, 0x1ab2, 0x065f, 0x06bf, 0x0b55, 0x70c4, 0xa860, 0x9882, 0xc883, 0xf083, 0xd042, 0xd042, 0x826e, 0x257c, 0x069f, 0x03f9, 0x0b76, 0xef9f, 0xffff, 
0xffff, 0xdf3e, 0x0399, 0x03da, 0x53f5, 0xd0c4, 0xd000, 0x816a, 0x1376, 0x2479, 0x23d6, 0x1270, 0x0a2f, 0x02b3, 0x0377, 0x253b, 0x2d7c, 0x03b8, 0x02b3, 0x0a4f, 0x0a4f, 0x2395, 0x2479, 0x13b7, 0x69ec, 0xc800, 0xd842, 0x73b3, 0x041a, 0x0339, 0xb69d, 0xffff, 
0xffff, 0xcf5e, 0x2251, 0x90a6, 0xd000, 0xd146, 0x7c96, 0x669f, 0x24db, 0x047b, 0x0419, 0x01d0, 0x0271, 0x01cd, 0x326c, 0x5b0c, 0x5b0c, 0x42ac, 0x01cc, 0x0271, 0x01f0, 0x0377, 0x04bb, 0x1c9a, 0x669f, 0x6d19, 0xc9c8, 0xd800, 0xa064, 0x29cf, 0xae9d, 0xffff, 
0xffff, 0xf7df, 0xda29, 0xa822, 0xa4d6, 0xdfff, 0xffff, 0xffff, 0x9dfb, 0x0317, 0x0bd7, 0x7d18, 0xcebc, 0x6b0b, 0x20a1, 0x5228, 0x5248, 0x28c2, 0x5227, 0xcebb, 0x8d99, 0x1bd7, 0x0317, 0x6d5a, 0xffff, 0xffff, 0xdfff, 0xad98, 0xa0c5, 0xc925, 0xef7d, 0xffff, 
0xffff, 0xffff, 0xffff, 0xdfbf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xae9d, 0xdf7e, 0xffff, 0xffff, 0xffff, 0x73ae, 0x52ab, 0x5aeb, 0x632c, 0xef5d, 0xffff, 0xffff, 0xefbf, 0xae7c, 0xf7bf, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffdf, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
  };

const uint16_t astroid[]= {
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xef7d, 0xe71c, 0xdedb, 0xdedb, 0xe73c, 0xf7be, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf77e, 0x9cf4, 0x73af, 0x7bcf, 0x8c51, 0xad76, 0xce39, 0xa535, 0x73af, 0x8410, 0x94b3, 0x8c51, 0x8c51, 0x8c72, 0x9cd3, 0xb576, 0xd6bb, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xb5b6, 0x6b4d, 0x4a6a, 0x632d, 0x738e, 0x6b4d, 0x630d, 0x630c, 0x5aab, 0x5acb, 0x738e, 0xa4f4, 0x9cf4, 0x9cd3, 0x9cb3, 0x9493, 0x8c31, 0x8411, 0xa535, 0xe73d, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x73af, 0x39a7, 0x632d, 0x7bcf, 0x6b6e, 0x528a, 0x528a, 0x52ab, 0x630d, 0x738e, 0x738e, 0x6b2d, 0x8411, 0xa535, 0x9cf4, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3, 0x8c31, 0x8c31, 0xd69a, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0x8c72, 0x10a3, 0x6b4e, 0x7baf, 0x738e, 0x39c7, 0x18e4, 0x2104, 0x2125, 0x18c4, 0x528b, 0x7bf0, 0x6b6e, 0x6b2d, 0x8410, 0xa514, 0xa514, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd4, 0x9492, 0x83f0, 0xdedb, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xef7d, 0x39a7, 0x4229, 0x73af, 0x7bcf, 0x630c, 0x18e4, 0x2966, 0x2966, 0x20e4, 0x2945, 0x632d, 0x73af, 0x738e, 0x6b6e, 0x632d, 0x73af, 0x8c72, 0xa514, 0xa514, 0x9cd3, 0x9cd3, 0x9cd3, 0x8c72, 0x9492, 0xf7be, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xef5d, 0x39e8, 0x4229, 0x738f, 0x73af, 0x738e, 0x4208, 0x2104, 0x2945, 0x39e8, 0x6b6e, 0x7bcf, 0x6b6e, 0x736e, 0x736e, 0x736e, 0x6b4d, 0x6b2d, 0x7bcf, 0x9492, 0xa514, 0x9cd3, 0x9cd3, 0x9cd4, 0x8410, 0xc618, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0x8c51, 0x2105, 0x630c, 0x7bcf, 0x7baf, 0x738f, 0x5aec, 0x630c, 0x7bcf, 0x8410, 0x7bcf, 0x738f, 0x6b6e, 0x736e, 0x736e, 0x738e, 0x6b6e, 0x632d, 0x632d, 0x8c51, 0xa514, 0x9cd3, 0x9cd3, 0x8c72, 0xa535, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xe73c, 0x5acb, 0x31a7, 0x4229, 0x5aec, 0x738e, 0x73af, 0x7bcf, 0x7baf, 0x7bd0, 0x630c, 0x39a7, 0x5acb, 0x7baf, 0x736e, 0x736e, 0x736e, 0x736e, 0x738e, 0x6b4d, 0x6b4d, 0x94b3, 0x9cf4, 0x9cd3, 0x9493, 0x9cd3, 0xffdf, 0xffff, 0xffff, 
0xffff, 0xffff, 0xd69a, 0x39c7, 0x2966, 0x526a, 0x4229, 0x4208, 0x4a49, 0x6b4e, 0x738f, 0x7bcf, 0x5aec, 0x18e4, 0x0841, 0x528a, 0x7bf0, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x738e, 0x6b2d, 0x8c51, 0xa514, 0x9cd3, 0x94b3, 0x94b3, 0xf79e, 0xffff, 0xffff, 
0xffff, 0xdefb, 0x3186, 0x2966, 0x4a6a, 0x4a49, 0x4a49, 0x4208, 0x4a49, 0x736e, 0x738e, 0x7bcf, 0x39c8, 0x18e4, 0x4a6a, 0x73af, 0x738e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x6b4d, 0x9472, 0xa4f4, 0x9cd3, 0x9493, 0x9cd3, 0xf7be, 0xffff, 0xffff, 
0xffdf, 0x5aab, 0x2945, 0x4a6a, 0x4a49, 0x4a49, 0x4a29, 0x4a29, 0x6b4d, 0x73af, 0x6b6e, 0x738e, 0x6b4d, 0x6b4d, 0x7bcf, 0x738e, 0x6b6e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x6b6e, 0x736e, 0x94b3, 0x9cf4, 0x9cd3, 0x9492, 0xa514, 0xffff, 0xffff, 0xffff, 
0xc618, 0x2125, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4208, 0x5aec, 0x7bf0, 0x738f, 0x738e, 0x6b6e, 0x73af, 0x73af, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x6b6e, 0x738e, 0x9cd3, 0x9cf4, 0x9cd3, 0x8c52, 0xad76, 0xffff, 0xffff, 0xffff, 
0xa534, 0x2105, 0x4a4a, 0x4a49, 0x4a49, 0x4a49, 0x4209, 0x52ab, 0x738e, 0x6b4d, 0x6b6e, 0x738e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x736e, 0x6b6e, 0x6b4d, 0x8c72, 0xad35, 0xa514, 0x9cf4, 0x9493, 0xce79, 0xffff, 0xffff, 
0xc639, 0x2925, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4229, 0x4a49, 0x4208, 0x5acb, 0x7baf, 0x736e, 0x736e, 0x6b6e, 0x738e, 0x7baf, 0x738f, 0x6b6e, 0x736e, 0x736e, 0x736e, 0x736e, 0x6b4e, 0x738e, 0x8431, 0x8c31, 0x8411, 0x9493, 0x8411, 0xd6ba, 0xffff, 
0xffff, 0x62ec, 0x2125, 0x4a6a, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4229, 0x4208, 0x630d, 0x73af, 0x736e, 0x6b6e, 0x73af, 0x73af, 0x5acb, 0x5aec, 0x738e, 0x736e, 0x736e, 0x736e, 0x6b6e, 0x73af, 0x73af, 0x6b2d, 0x6b2d, 0x62ec, 0x8431, 0x9cf4, 0x8c31, 0xe73d, 
0xffff, 0xe71c, 0x3186, 0x3186, 0x4a6a, 0x4a49, 0x4a49, 0x4a49, 0x4208, 0x52ab, 0x7baf, 0x6b6e, 0x738e, 0x7bcf, 0x738e, 0x528a, 0x39a7, 0x526a, 0x73af, 0x736e, 0x736e, 0x6b6e, 0x73af, 0x736e, 0x632d, 0x73af, 0x736e, 0x6b6e, 0x6b6e, 0x9cd3, 0x8c31, 0xc618, 
0xffff, 0xffff, 0xd69a, 0x4208, 0x41e8, 0x4a49, 0x4a49, 0x4a29, 0x4a29, 0x6b6e, 0x738f, 0x73af, 0x7baf, 0x632d, 0x4a49, 0x4208, 0x4208, 0x5aec, 0x73af, 0x736e, 0x736e, 0x738f, 0x6b6e, 0x31a7, 0x2104, 0x52ab, 0x7bcf, 0x738e, 0x632d, 0x7bd0, 0x9472, 0xd69a, 
0xffff, 0xffff, 0xffff, 0x8c72, 0x2125, 0x4a49, 0x4a49, 0x4208, 0x5acb, 0x7bf0, 0x7baf, 0x6b6e, 0x52ab, 0x4208, 0x4229, 0x4a49, 0x4229, 0x632d, 0x73af, 0x738e, 0x738e, 0x7bf0, 0x528a, 0x18e4, 0x2104, 0x39c7, 0x7baf, 0x738e, 0x6b6e, 0x632d, 0x7bf0, 0xf7be, 
0xffff, 0xffff, 0xffff, 0xa535, 0x2125, 0x4a49, 0x4a49, 0x4229, 0x52ab, 0x6b6e, 0x5acc, 0x4229, 0x4208, 0x4a49, 0x4a49, 0x4a49, 0x4229, 0x6b4d, 0x7bcf, 0x738e, 0x6b6e, 0x7bf0, 0x52ab, 0x2105, 0x2104, 0x4208, 0x7bcf, 0x738e, 0x738e, 0x5acb, 0x8431, 0xffff, 
0xffff, 0xffff, 0xffff, 0xd69a, 0x2966, 0x4a49, 0x4a49, 0x4a49, 0x4a29, 0x4229, 0x4208, 0x4229, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4208, 0x630c, 0x7bcf, 0x4a6a, 0x52ab, 0x7bd0, 0x6b6e, 0x2125, 0x18c3, 0x630c, 0x7bcf, 0x736e, 0x736e, 0x528a, 0xbdf8, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0x5aec, 0x2966, 0x4a4a, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a29, 0x4a49, 0x4a6a, 0x39e8, 0x528b, 0x73af, 0x73af, 0x52ab, 0x528a, 0x7bcf, 0x73af, 0x6b6e, 0x6b4e, 0x630c, 0xef5d, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xc618, 0x18c4, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a29, 0x4229, 0x4229, 0x526a, 0x738e, 0x738e, 0x7bcf, 0x7bf0, 0x6b6e, 0x630c, 0x73af, 0x5acb, 0x8410, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x73af, 0x18e4, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4229, 0x6b4d, 0x73af, 0x738e, 0x7bcf, 0x52ab, 0x4229, 0x6b4d, 0x4208, 0xd69a, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x630c, 0x18c4, 0x4208, 0x4a6a, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4208, 0x528b, 0x7bcf, 0x7bcf, 0x5acc, 0x4209, 0x4209, 0x18c3, 0x94b3, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x8c51, 0x2966, 0x2105, 0x41e8, 0x4a4a, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4229, 0x39e8, 0x39c8, 0x39c8, 0x39c7, 0x4a49, 0x4a6a, 0x4208, 0x31a7, 0x18c4, 0x8c71, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xd69a, 0x73af, 0x4208, 0x2125, 0x2945, 0x3186, 0x3186, 0x2946, 0x2125, 0x39c7, 0x4a49, 0x528a, 0x52ab, 0x528a, 0x4208, 0x39c8, 0x2966, 0x4208, 0xad55, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xe73c, 0xa535, 0x738e, 0x6b4d, 0x6b4d, 0x73af, 0x94b3, 0xd69a, 0xef5d, 0xf7be, 0xf7be, 0xf7be, 0xef5d, 0xe71c, 0xce39, 0xef7d, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};

void loop () {
  unsigned long now = millis();
  unsigned long d=now-myTime;
  if (pcf8574) {
    if (pcf.digitalRead(0)==LOW) {
      y=y-2;
      if (y<s) y=s;
    } 
    if (pcf.digitalRead(3)==LOW) {
      y=y+2;
      if (y>240-s) y=240-s;
    }  
    
    if (pcf.digitalRead(1)==LOW) {
      x=x-2;
      if (x<s) x=s;
    } 
    if (pcf.digitalRead(2)==LOW) {
      x=x+2;
      if (x>240-s) x=240-s;
    } 
    
    if (pcf.digitalRead(4)==LOW) {
      drawRainbow();
      px=-1;
      py=-1;
    } 
    if (pcf.digitalRead(5)==LOW) {
      if (by<=-10)
      {
        by=y-s-6+d;
        bx=x;
        pby=-1;       
      }
    }
    //astriod
    if (ay==-10) {
      ax=random(17, 240-17);
      pay=-1;
    }
    if (ay>270) {
      ay=-10;
    } else 
      ay=ay+1;
    if (pay!=ay) {
      tft.drawRGBBitmap(ax-16,ay-16, astroid, 32,32);
      pay=ay;      
    }
    //spaceship
    if ((px!=x) || (py!=y)) 
    {      
      tft.drawRGBBitmap(x-s,y-s, spaceship, 32,32);
      tft.drawRect(x-s-1,y-s-1,s*2+2,s*2+2,ST77XX_WHITE);
      px=x;
      py=y;
    }
    //bullet
    if (by>-10) 
    {
      by=by-d;
      //detect
      if ((by+d>=ay-16) && (by<=ay+16) && (bx>=ax-16) && (bx<=ax+16))
      {
       tft.fillRect(bx-3,by-5,6,10,ST77XX_WHITE);
       tft.fillRect(ax-16,ay-16,32,32,ST77XX_WHITE);
       //by=-10;
       //pby=-10;
       ay=-10;       
       ax=-10;
      } 
      if (pby!=by) {
        tft.fillRect(bx-3,by-5, 6, 10, ST77XX_BLACK);
        tft.fillRect(bx-3,by+5,6,pby-by+1,ST77XX_WHITE);
        pby=by;
      }    
    }
  }
  myTime=now;
  //server.handleClient();  
}
